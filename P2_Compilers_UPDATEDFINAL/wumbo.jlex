import java_cup.runtime.*; 
// defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}
%%

DIGIT=        [0-9]
SPACE=        [\040\t]
BACKSLASH = [\\]
ESCAPE = [nt'\"\?\\]
NOTESCAPE = [^nt'\"\?\\]
SINGLECHAR = [^\n\"\\]
SLASH = [/]
HASHTAG = [#]
LETTER= [A-Za-z]
UNDER =  [_]
QUOTE = [\"]
NOTQUOTE = [^\"]

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%

"bool" {
		Symbol curSym = new Symbol(sym.BOOL, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"int" {
		Symbol curSym = new Symbol(sym.INT, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"void" {
		Symbol curSym = new Symbol(sym.VOID, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"true" {
		Symbol curSym = new Symbol(sym.TRUE, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"false" {
		Symbol curSym = new Symbol(sym.FALSE, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"if" {
		Symbol curSym = new Symbol(sym.IF, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"else" {
		Symbol curSym = new Symbol(sym.ELSE, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"while" {
		Symbol curSym = new Symbol(sym.WHILE, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}
"return" {
		Symbol curSym = new Symbol(sym.RETURN, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"struct" {
		Symbol curSym = new Symbol(sym.STRUCT, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"cin" {
		Symbol curSym = new Symbol(sym.CIN, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"cout" {
		Symbol curSym = new Symbol(sym.COUT, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

({UNDER}|{LETTER})({LETTER}|{UNDER}|{DIGIT})* {
	Symbol curSym = new Symbol(sym.ID, new IdTokenVal(yyline++, CharNum.num, yytext()));
	CharNum.num += yytext().length();
	return curSym;
}

{DIGIT}+ { 
	  int val = 0;
          try {
               val = Integer.parseInt(yytext());
          } catch (Exception e) {
               val = Integer.MAX_VALUE;
               ErrMsg.warn(yyline++, CharNum.num, "integer literal is too large, substituting for max value");
          } finally {
               Symbol curSym = new Symbol(sym.INTLITERAL, new IntLitTokenVal(yyline++, CharNum.num, val));
               CharNum.num += yytext().length();
               return curSym;
          }
}
          
{QUOTE}(({SINGLECHAR})*{BACKSLASH}{ESCAPE})*({SINGLECHAR})*{QUOTE} {
        Symbol curSym = new Symbol(sym.STRINGLITERAL,new StrLitTokenVal(yyline + 1, CharNum.num, yytext()));
        CharNum.num += yytext().length();
        return curSym; 
}

{QUOTE}(({SINGLECHAR})*{BACKSLASH}{NOTESCAPE})*({SINGLECHAR})* {
  
        ErrMsg.fatal(yyline + 1, CharNum.num, "bad");
}

{QUOTE}(({SINGLECHAR})*{BACKSLASH}{NOTESCAPE})*({SINGLECHAR})*{QUOTE} {
        ErrMsg.fatal(yyline + 1, CharNum.num, "Sorry! This escape character is not valid!");
}

{QUOTE}(({SINGLECHAR})*{BACKSLASH}{ESCAPE})*({SINGLECHAR})* {
        ErrMsg.fatal(yyline + 1, CharNum.num, "Sorry! ThE string literal is never closed as it is unterminated");
}
          
"<<" {
		Symbol curSym = new Symbol(sym.WRITE, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

">>" {
		Symbol curSym = new Symbol(sym.READ, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"++" {
		Symbol curSym = new Symbol(sym.PLUSPLUS, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"--" {
		Symbol curSym = new Symbol(sym.MINUSMINUS, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"&&" {
		Symbol curSym = new Symbol(sym.AND, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"||" {
		Symbol curSym = new Symbol(sym.OR, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"==" {
		Symbol curSym = new Symbol(sym.EQUALS, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"!=" {
		Symbol curSym = new Symbol(sym.NOTEQUALS, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"<=" {
		Symbol curSym = new Symbol(sym.LESSEQ, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

">=" {
		Symbol curSym = new Symbol(sym.GREATEREQ, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"{" {
		Symbol curSym = new Symbol(sym.LCURLY, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"}" {
		Symbol curSym = new Symbol(sym.RCURLY, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"(" {
		Symbol curSym = new Symbol(sym.LPAREN, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

")" {
		Symbol curSym = new Symbol(sym.RPAREN, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

";" {
		Symbol curSym = new Symbol(sym.SEMICOLON, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"," {
		Symbol curSym = new Symbol(sym.COMMA, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"." {
		Symbol curSym = new Symbol(sym.DOT, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"+" {
		Symbol curSym = new Symbol(sym.PLUS, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"-" {
		Symbol curSym = new Symbol(sym.MINUS, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"*" {
		Symbol curSym = new Symbol(sym.TIMES, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"/" {
		Symbol curSym = new Symbol(sym.DIVIDE, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"!" {
		Symbol curSym = new Symbol(sym.NOT, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"<" {
		Symbol curSym = new Symbol(sym.LESS, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

">" {
		Symbol curSym = new Symbol(sym.GREATER, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

"=" {
		Symbol curSym = new Symbol(sym.ASSIGN, new TokenVal(yyline++, CharNum.num));
		CharNum.num += yytext().length();
		return curSym;
}

(({HASHTAG}{HASHTAG})|({SLASH}{SLASH}{SLASH})).* {
    // Comment
}

\n {    
		CharNum.num = 1;
}

{SPACE}+ {
		CharNum.num += yytext().length(); 
}

"+" { 
	    Symbol s = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
        CharNum.num++;
        return s;
}
        
.   { 
		ErrMsg.fatal(yyline+1, CharNum.num,
                         "ignoring illegal character: " + yytext());
        CharNum.num++;
}

